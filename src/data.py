import json
import os
from typing import Optional

import numpy as np


def load_balanced_dataset(save_dir: str):
    """Load dataset as saved by dump_balanced_dataset. \\
    :param save_dir: directory where the dataset is saved. \\
    :return: inputs, targets, metadata.
    """
    with open(os.path.join(save_dir, "metadata.json"), "r") as f:
        metadata = json.load(f)
    with open(os.path.join(save_dir, "inputs.npy"), "rb") as f:
        inputs = np.load(f)
    with open(os.path.join(save_dir, "targets.npy"), "rb") as f:
        targets = np.load(f)
    with open(os.path.join(save_dir, "class_prototypes.npy"), "rb") as f:
        class_prototypes = np.load(f)
    return inputs, targets, metadata, class_prototypes


def dump_balanced_dataset(inputs, targets, metadata, save_dir: str, class_prototypes):
    """Dump dataset as generated by generate_balanced_dataset."""
    os.makedirs(save_dir, exist_ok=True)
    with open(os.path.join(save_dir, "metadata.json"), "w") as f:
        json.dump(metadata, f)
    with open(os.path.join(save_dir, "inputs.npy"), "wb") as f:
        np.save(f, inputs)
    with open(os.path.join(save_dir, "targets.npy"), "wb") as f:
        np.save(f, targets)
    with open(os.path.join(save_dir, "class_prototypes.npy"), "wb") as f:
        np.save(f, class_prototypes)


def generate_balanced_dataset(
    N: int, P: int, C: int, p: float, rng: np.random.Generator
):
    """Generates a balanced dataset with P*C patterns and C classes. Sample C N-dimensional
    binary (+/- 1) class prototypes and flip a fraction p of their bits P times to generate
    the patterns."""
    class_prototypes = rng.choice([-1, 1], size=(C, N))
    inputs = np.zeros((P * C, N), dtype=np.int8)
    for c in range(C):
        inputs[c * P : (c + 1) * P] = class_prototypes[c]
        flips = 2 * rng.binomial(1, 1 - p, size=(P, N)) - 1
        inputs[c * P : (c + 1) * P] *= flips
    targets = np.repeat(np.eye(C), P, axis=0)
    metadata = {"N": N, "P": P, "C": C, "p": p}
    return inputs, targets, metadata, class_prototypes


def get_balanced_dataset(
    N: int,
    P: int,
    C: int,
    p: float,
    save_dir: str,
    rng: Optional[np.random.Generator] = None,
    shuffle: bool = True,
    load_if_available: bool = True,
    dump: bool = True,
):
    """Generates a balanced dataset with P*C patterns and C classes. Sample C N-dimensional
    binary (+/- 1) class prototypes and flip a fraction p of their bits P times to generate
    the patterns. \\
    Dump the class prototypes, the generated pairs (pattern, class), and a metadata file which
    contains the dataset parameters. \\
    :param N: input dimensionality. \\
    :param P: number of patterns per class. \\
    :param C: number of classes. \\
    :param p: probability of flipping a bit from class prototypes. \\
    :param save_dir: directory to save the dataset. \\
    :param load_if_available: if True, load the dataset from save_dir if metadata match.
    :param dump: if True, dump the dataset to save_dir. \\
    """
    if load_if_available and os.path.exists(save_dir):
        inputs, targets, metadata, class_prototypes = load_balanced_dataset(save_dir)
        if (
            metadata["N"] == N
            and metadata["P"] == P
            and metadata["C"] == C
            and metadata["p"] == p
        ):
            return inputs, targets, metadata, class_prototypes

    rng = np.random.default_rng() if rng is None else rng
    inputs, targets, metadata, class_prototypes = generate_balanced_dataset(
        N, P, C, p, rng
    )
    if shuffle:
        indices = rng.permutation(P * C)
        inputs = inputs[indices]
        targets = targets[indices]
    if dump:
        dump_balanced_dataset(inputs, targets, metadata, save_dir, class_prototypes)
    return inputs, targets, metadata, class_prototypes
